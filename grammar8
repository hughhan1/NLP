# Symbols in the grammar are case-sensitive.
# 
# This grammar uses a convention that
#    - terminals are lowercase          (president)
#    - preterminals are capitalized     (Noun)
#    - other nonterminals are all-caps  (NP)
# 
# This convention just makes grammars more readable to humans.  Thus:
#
#    - When *you* are writing grammars in questions 3 and 6, you should 
#      follow this convention unless you have a good reason not to.  
#
#    - But your *program* should still work with grammars that don't
#      follow this convention.  So how can your program reliably tell
#      the difference between terminal and nonterminal symbols?  If
#      there is at least one rule for rewriting a symbol, then that
#      symbol is a nonterminal and should be rewritten.
#######################

# Rules for creating full sentences.

2	ROOT	S .
1	ROOT	S !
0.5	ROOT	is it true that S ?
1   ROOT    Aux S_ori ?        
0.5 ROOT    Modal it be ADJ INFP ?      # this rule is for (8a)
0.5 ROOT    Modal it be ADJ ForToP ?    # this rule is for (8a)    
0.5 ROOT    what Aux S_ori_wo_obj ?     # this rule is for (8b)
0.5 ROOT    who S_ed_wo_sub ?          # this rule is for (8b)
0.5 ROOT    where Aux S_ori ?           # this rule is for (8b)

# The basic grammar rules.  Here's what the abbreviations stand for:
#    S_ori_wo_obj = sentense in present tense without a object
#    S_ori_wo_sub = sentense in present tense without a subject
#    S_ed_wo_obj  = sentense in past tense without a object
#    S_ed_wo_sub  = sentense in past tense without a subject
#
#    NP 	= noun phrase
#    PP 	= prepositional phrase
#    Det 	= determiner that is used before non-vowel sound
#    Det_vo = determiner that is used before vowel sound
#    Prep 	= preposition
#    Conj 	= conjunction
#    Aux 	= auxiliary verb

#    NOUN 		= noun, no matter what sound it begins with
#    Noun 		= noun that do not begin with vowel sound
#    Noun_vo 	= noun that begin with vowel sound
#    Noun_pro 	= proper noun

#    ADJ 	= adjective, no matter what sound it begins with
#    Adj 	= adjective that do not begin with vowel sound
#    Adj_vo = adjective that begin with vowel sound

#    ADV 	= adverb, no matter what sound it begins with
#    Adv 	= adverb that do not begin with vowel sound
#    Adv_vo = adverb that begin with vowel sound

#    V_that = a verb followed by "that"


#                                       Past Tense      Present Tense      
#    Transitive Verb                     V_tr_ed         V_tr_ori          # "ori" for "original"
#    Intransitive Verb                   V_in_ed         V_in_ori    
#    Verb that "that" clauses follow     V_that_ed       V_that_ori
#    Verb that infinitive clauses follow V_inf_ed        V_inf_ori
#    Sentence                            S               S_ori             # "S_ori" is a sentence whose main predicate verb is in its original form
#    Verb Phrase                         VP_pas          VP_pre            
#    Noun Clause                         NC_pas          NC_pre            # "NC_pre" will not appear in this version of grammar.

#    # The following symbols are for question 8.
#    INFP = infinitive phrase
#    ForToP = for-to phrase (more explaination in README section 8)

0.1 S	NC_pas V_tr_ed NP
1	S 	NP 			VP_pas
0.1 S   it V_tr_ed 	NP NC_pas
0.1 S   it is ADJ INFP              # this rule is for (8a)
0.1 S   it is ADJ ForToP            # this rule is for (8a)

0.1 S_ori	    NC_pas V_tr_ori NP         
1	S_ori		NP VP_pre               
0.1 S_ori   	it V_tr_ori NP NC_pas

##########################################################
# begin rule for (8b)
0.5 S_ed_wo_obj   NP V_that_ed that S_ed_wo_obj
0.5 S_ed_wo_obj   NP V_that_ed that S_ed_wo_sub
1   S_ed_wo_obj   NP V_tr_ed
1   S_ed_wo_obj   NP V_tr_ed PP
1   S_ed_wo_obj   NP VP_pas Prep
1   S_ed_wo_obj   NP VP_pas PP Prep

1   S_ed_wo_sub   VP_pas

0.5 S_ori_wo_obj   NP V_that_ori that S_ori_wo_obj
0.5 S_ori_wo_obj   NP V_that_ori that S_ori_wo_sub
1   S_ori_wo_obj   NP V_tr_ori
1   S_ori_wo_obj   NP V_tr_ori PP
1   S_ori_wo_obj   NP VP_pre Prep
1   S_ori_wo_obj   NP VP_pre PP Prep

1   S_ori_wo_sub   VP_pre
# end rule for (8b)
##########################################################

1	VP_pas  V_tr_ed NP
0.2 VP_pas  V_that_ed NC_pas
0.4 VP_pas  V_in_ed
0.3 VP_pas  VP_pas PP
0.3 VP_pas  VP_pas Conj VP_pas
0.3 VP_pas  V_inf_ed INFP          # this rule is for (8a)

0.3 V_tr_ed V_tr_ed Conj V_tr_ed

1	VP_pre   V_tr_ori NP          
0.2 VP_pre   V_that_ori NC_pas
0.4 VP_pre   V_in_ori
0.3 VP_pre   VP_pre PP
0.3 VP_pre   VP_pre Conj VP_pre
0.3 VP_pre    V_inf_ori INFP        # this rule is for (8a)

0.3 V_tr_ori V_tr_ori Conj V_tr_ori

1   NC_pas  that S

1	NP		Det Noun
0.5 NP  	Det_vo Noun_vo    
0.2	NP		NP PP
0.6 NP  	Noun_pro
0.2 NP  	NP Conj NP
0.3 NP      the Noun that S_ed_wo_sub  # rule for (8b)
0.3 NP      the Noun that S_ed_wo_obj  # rule for (8b)

1   INFP    to VP_pre       # this rule is for (8a)
1   ForToP  for NP INFP     # this rule is for (8a)

1	PP		Prep NP

1.5 Noun	Adj Noun
0.7 Noun_vo Adj_vo NOUN 
2   NOUN   	Noun
1   NOUN   	Noun_vo

1   Adj Adv Adj
1   Adj_vo  Adv_vo ADJ  
1   ADJ 	Adj
1   ADJ 	Adj_vo

# Vocabulary.  Your program can see that "ate" is a terminal
# symbol because there exists no rule for rewriting it.
# Any symbol that can rewrite as a terminal (or a string of 
# terminals, like "chief of staff") is called a "preterminal."  Notice 
# that a preterminal is a special kind of nonterminal.

1   V_tr_ed     worked on   
1	V_tr_ed     ate
1	V_tr_ed     wanted
1	V_tr_ed     kissed
1	V_tr_ed     understood
0.3	V_tr_ed     pickled

1	V_tr_ori    eat        
1   V_tr_ori    worked on
1	V_tr_ori	want
1	V_tr_ori	kiss
1	V_tr_ori	understand
0.3	V_tr_ori	pickle

1   V_in_ed     worked
1   V_in_ed     sighed
1   V_in_ed     jumped
1   V_in_ed     flew

1   V_in_ori    sigh      
1   V_in_ori    work
1   V_in_ori    jump
1   V_in_ori    fly

1   V_that_ed   thought
1   V_that_ed   understood

1   V_that_ori  think     
1   V_that_ori  understand

1   V_inf_ed wanted         # these rules are for (8a)
1   V_inf_ed failed
1   V_inf_ed managed

1   V_inf_ori want          # these rules are for (8a)
1   V_inf_ori fail
1   V_inf_ori manage

1   Aux did              
1   Aux will
1   Aux can

1   Modal   can             # these rules are for (8a)
1   Modal   could
1   Modal   will
1   Modal   should

1	Det	the             
2	Det	a
0.5	Det	every

1	Det_vo	the            
2	Det_vo	an
0.5	Det_vo	every

1	Noun	president
1	Noun	sandwich
0.3	Noun	pickle
0.5	Noun	chief of staff
1	Noun	floor

1   Noun_vo apple
1   Noun_vo idea

1   Noun_pro	Sally
1   Noun_pro    Xiaochen

1   Conj    and
0.5 Conj    or

1.5	Adj	fine
1	Adj	delicious
1	Adj	perplexed
1	Adj	pickled
1   Adj possible            # this rule is for (8a)

1   Adj_vo  ambivalent
1   Adj_vo  eloquent
0.8 Adj_vo  awesome         # this rule is for (8a)

1   Adv 	very
1   Adv     really
1   Adv 	somewhat

1   Adv_vo 	extremely        

1	Prep	with
1.5	Prep	on
1	Prep	under
1.5	Prep	in
